Consignas Python

游릭Nivel Facil

1.Escribe un programa que imprima los n칰meros del 1 al 10 usando un bucle for.

2.Suma de los primeros N n칰meros: Pide al usuario un n칰mero N y calcula la suma de todos los n칰meros desde 1 hasta N usando un bucle while.

3.Tabla de multiplicar: Pide al usuario un n칰mero y muestra su tabla de multiplicar del 1 al 10.

4.N칰meros pares: Imprime todos los n칰meros pares del 0 al 20 usando un bucle.

5.Contador regresivo: Haz un programa que imprima una cuenta regresiva desde 10 hasta 0.

6.Validar entrada: Pide al usuario que ingrese un n칰mero positivo.Si ingresa un n칰mero negativo o cero, vuelve a pedirle hasta que ingrese uno v치lido.

7.Suma de 5 n칰meros: Pide al usuario 5 n칰meros y calcula su suma.

8.Promedio de N n칰meros: Pide al usuario cu치ntos n칰meros quiere ingresar (N) y luego p칤dele esos N n칰meros para calcular su promedio.

9.Imprimir asteriscos: Pide al usuario un n칰mero y luego imprime esa cantidad de asteriscos en una sola l칤nea.

10.Factorial (b치sico): Calcula el factorial de un n칰mero peque침o (ej. 5), sin pedir entrada del usuario. (El factorial de 5 es 5칑4칑3칑2칑1=120)



游리Nivel intermedio

11.N칰meros primos: Pide al usuario un n칰mero y determina si es un n칰mero primo (solo divisible por 1 y por s칤 mismo).

12.Secuencia de Fibonacci: Pide al usuario un n칰mero N e imprime los primeros N t칠rminos de la secuencia de Fibonacci.(La secuencia comienza con 0, 1, y cada t칠rmino siguiente es la suma de los dos anteriores: 0, 1, 1, 2, 3, 5, ...)

13.Invertir n칰mero: Pide al usuario un n칰mero entero y muestra el n칰mero invertido. Por ejemplo, si ingresa 123, debe mostrar 321.

14.Cifras de un n칰mero: Pide al usuario un n칰mero entero y cuenta cu치ntas cifras tiene.

15.Adivina el n칰mero: Genera un n칰mero aleatorio entre 1 y 100. Pide al usuario que adivine el n칰mero,d치ndole pistas si su intento es demasiado alto o demasiado bajo, hasta que acierte.



游댮Nivel Dificil

16.MCD (M치ximo Com칰n Divisor): Pide al usuario dos n칰meros enteros y calcula su M치ximo Com칰n Divisor utilizando el algoritmo de Euclides (que se basa en repetidas divisiones).

17.Patr칩n de asteriscos (pir치mide): Pide al usuario un n칰mero N y dibuja una pir치mide de asteriscos de N filas. Por ejemplo, para N=4:
   *
  ***
 *****
*******

18.N칰mero perfecto: Pide al usuario un n칰mero y determina si es un n칰mero perfecto. Un n칰mero perfecto es un entero positivo que es igual a la suma de sus divisores propios (excluyendo el propio n칰mero)
Por ejemplo, 6 es un n칰mero perfecto porque sus divisores propios son 1, 2 y 3, y 1+2+3=6.

19.Ejercicio: Aproximaci칩n de e^x mediante Serie de Taylor
   Objetivo: Implementar la serie de Taylor para calcular una aproximaci칩n del valor de e^x.
   La serie de Taylor para e^x es: e^x = 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!)
   Se pedir치 al usuario el valor de 'x' y el n칰mero de t칠rminos 'n' a utilizar en la aproximaci칩n.
   Restricci칩n: No usar la funci칩n math.exp() de la librer칤a math.

20.Juego "FizzBuzz": Escribe un programa que imprima los n칰meros del 1 al 100. Pero para los m칰ltiplos de tres, imprime "Fizz" en lugar del n칰mero, 
y para los m칰ltiplos de cinco, imprime "Buzz". Para n칰meros que son m칰ltiplos tanto de tres como de cinco, imprime "FizzBuzz".